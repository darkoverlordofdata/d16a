// Generated by CoffeeScript 1.3.3

/*
+--------------------------------------------------------------------+
| katra.coffee
+--------------------------------------------------------------------+
| Copyright DarkOverlordOfData (c) 2012
+--------------------------------------------------------------------+
|                                                                    
| This file is a part of Katra
|                                                                    
| Katra is free software; you can copy, modify, and distribute 
| it under the terms of the GNU General Public License Version 3     
|                                                                    
+--------------------------------------------------------------------+
*/


(function() {
  var $, Basic, Benchmark, CodeModel, Main, MainView, Runtime, io,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  Benchmark = (function() {

    function Benchmark() {
      this.elapsed_time = __bind(this.elapsed_time, this);

      this.mark = __bind(this.mark, this);

    }

    Benchmark.prototype.marker = {};

    Benchmark.prototype.mark = function(name) {
      var d;
      d = new Date();
      return this.marker[name] = d.getTime();
    };

    Benchmark.prototype.elapsed_time = function(point1, point2) {
      var d;
      if (point1 === void 0) {
        return '';
      }
      if (point2 === void 0) {
        d = new Date();
        this.marker[name] = d.getTime();
      }
      return this.marker[point2] - this.marker[point1];
    };

    return Benchmark;

  })();

  io = {};

  io.Input = (function() {

    _Class.prototype.win = null;

    _Class.prototype.dom = null;

    function _Class(selector, parent) {
      this.parent = parent;
      this.win = $(selector);
      this.dom = $('<div class="runtime">');
      this.win.append(this.dom);
    }

    _Class.prototype.input = function(p) {
      var _this = this;
      this._io = this._input(p, function(iobuf) {
        _this.iobuf = iobuf;
        return false;
      });
      return true;
    };

    _Class.prototype._input = function(p, callback) {
      var io_buf;
      io_buf = [];
      if (this._io != null) {
        return this._io;
      }
      io = this.dom.console({
        promptLabel: ">",
        continuedPromptLabel: ">>",
        promptHistory: true,
        autofocus: true,
        commandValidate: function(line) {
          if (line === "") {
            return false;
          } else {
            return true;
          }
        },
        commandHandle: function(line, report) {
          io.continuedPrompt = false;
          callback(line);
          return true;
        }
      });
      return io;
    };

    return _Class;

  })();

  io.Output = (function() {

    _Class.prototype.win = null;

    _Class.prototype.dom = null;

    function _Class(selector) {
      this.print = __bind(this.print, this);

      this.println = __bind(this.println, this);

      this.scroll = __bind(this.scroll, this);
      this.win = $(selector);
      this.dom = $('<pre>');
      this.win.append(this.dom);
    }

    _Class.prototype.scroll = function() {
      return this.win.scrollTop(99999999);
    };

    _Class.prototype.println = function(line) {
      if (line == null) {
        line = '';
      }
      return this.dom.append("" + line + "\n");
    };

    _Class.prototype.print = function(value) {
      if (value == null) {
        value = '';
      }
      return this.dom.append(value);
    };

    return _Class;

  })();

  Basic = (function() {
    var BASE, DATA, DEF, DELIMITER, DIM, END, FOR, GOSUB, GOTO, IDENTIFIER, IF, IMAGE, INPUT, KEYWORD, KEYWORDS, LET, MAT, NEXT, NUMBER, PRINT, RANDOMIZE, READ, REM, RETURN, STOP, STRING, isalpha, isdelim, isdigit, iswhite;

    DELIMITER = 1;

    IDENTIFIER = 2;

    NUMBER = 3;

    KEYWORD = 4;

    STRING = 5;

    BASE = 1;

    DATA = 2;

    DEF = 3;

    DIM = 4;

    END = 5;

    FOR = 6;

    GOTO = 7;

    GOSUB = 8;

    IF = 9;

    IMAGE = 10;

    INPUT = 11;

    LET = 12;

    MAT = 13;

    NEXT = 14;

    PRINT = 15;

    RANDOMIZE = 16;

    READ = 17;

    REM = 18;

    RETURN = 19;

    STOP = 20;

    KEYWORDS = {
      BASE: BASE,
      DATA: DATA,
      DEF: DEF,
      DIM: DIM,
      END: END,
      FOR: FOR,
      GOTO: GOTO,
      GOSUB: GOSUB,
      IF: IF,
      IMAGE: IMAGE,
      INPUT: INPUT,
      LET: LET,
      MAT: MAT,
      NEXT: NEXT,
      PRINT: PRINT,
      RANDOMIZE: RANDOMIZE,
      READ: READ,
      REM: REM,
      RETURN: RETURN,
      STOP: STOP
    };

    isalpha = function(char) {
      if ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z')) {
        return true;
      } else {
        return false;
      }
    };

    isdelim = function(char) {
      if (" .!;,+-<>'/*%^=()[]\t\r\n".indexOf(char) === -1) {
        return false;
      } else {
        return true;
      }
    };

    isdigit = function(char) {
      if (char >= '0' && char <= '9') {
        return true;
      } else {
        return false;
      }
    };

    iswhite = function(char) {
      if (char === " " || char === "\t") {
        return true;
      } else {
        return false;
      }
    };

    Basic.prototype.pcode = [];

    Basic.prototype.sym = [];

    Basic.prototype.labels = {};

    Basic.prototype.symtbl = {};

    Basic.prototype.env = null;

    Basic.prototype.token_type = 0;

    Basic.prototype.token = 0;

    Basic.prototype.pos = 0;

    Basic.prototype.eol = "\n";

    Basic.prototype.eot = "\x00";

    Basic.prototype.e = '';

    Basic.prototype.TRACE = false;

    function Basic(env, code, TRACE) {
      var bench, end_time, et, st, start_time, sym, x, _i, _len, _ref;
      this.env = env;
      this.TRACE = TRACE != null ? TRACE : false;
      this.run = __bind(this.run, this);

      bench = new Benchmark();
      bench.mark('start');
      this.e = '';
      try {
        this.load(code);
      } catch (ex) {
        this.e = ex.message;
        this.env.disable();
      } finally {
        bench.mark('end');
        x = bench.elapsed_time('start', 'end');
        start_time = new Date(bench.marker['start']);
        end_time = new Date(bench.marker['end']);
        st = start_time.toLocaleTimeString() + (start_time.getMilliseconds() / 1000).toString().substr(1);
        et = end_time.toLocaleTimeString() + (end_time.getMilliseconds() / 1000).toString().substr(1);
        this.env.logger.println("Start time: " + st);
        this.env.logger.println("End time  : " + et);
        this.env.logger.println("");
        this.env.logger.println("     Symbols");
        this.env.logger.println("name string array");
        this.env.logger.println("=================");
        _ref = this.sym;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sym = _ref[_i];
          this.env.logger.println("" + sym + "    " + this.symtbl[sym].string + "  " + this.symtbl[sym].array);
        }
        this.env.logger.println("");
        this.env.logger.println("Compiled " + this.pcode.length + " lines in " + x + " ms.");
        if (this.e !== '') {
          this.env.logger.println("Exception   : " + this.e);
        }
      }
    }

    Basic.prototype.rvar = function(tokens, types) {
      var i, isarray, isstring, token, _i, _len;
      isstring = false;
      isarray = false;
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        token = tokens[i];
        if (types[i] === STRING) {
          tokens[i] = "\"" + token + "\"";
          isstring = false;
          isarray = false;
        } else {
          switch (token) {
            case "=":
              tokens[i] = "===";
              break;
            case "<>":
              tokens[i] = "!==";
              break;
            case "AND":
              tokens[i] = "&&";
              break;
            case "NOT":
              tokens[i] = "!";
              break;
            case "OR":
              tokens[i] = "||";
              break;
            case ",":
              if (isstring === false) {
                tokens[i] = "][";
              }
              break;
            case "[":
              if (isstring) {
                tokens[i] = ".slice(";
              }
              break;
            case "]":
              if (isstring) {
                if (isarray) {
                  tokens[i] = ").join(\"\")";
                } else {
                  tokens[i] = ")";
                }
                isstring = false;
              }
              break;
            default:
              if (types[i] === IDENTIFIER) {
                tokens[i] = "this." + token;
                if (token.indexOf("$") !== -1) {
                  isstring = true;
                  if (this.symtbl[token] != null) {
                    isarray = true;
                  } else {
                    isarray = false;
                  }
                }
              }
          }
        }
      }
      return tokens.join("");
    };

    Basic.prototype.lvar = function(tokens, types) {
      var i, isstring, token, _i, _len;
      isstring = false;
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        token = tokens[i];
        switch (token) {
          case "=":
            tokens[i] = "===";
            break;
          case "<>":
            tokens[i] = "!==";
            break;
          case "AND":
            tokens[i] = "&&";
            break;
          case "NOT":
            tokens[i] = "!";
            break;
          case "OR":
            tokens[i] = "||";
            break;
          case ",":
            if (isstring === false) {
              tokens[i] = "][";
            }
            break;
          case "[":
            if (isstring) {
              tokens[i] = "(";
            }
            break;
          case "]":
            if (isstring) {
              tokens[i] = "";
            }
            break;
          default:
            if (types[i] === IDENTIFIER) {
              tokens[i] = "this." + token;
              if (token.indexOf("$") !== -1) {
                isstring = true;
              }
            }
        }
      }
      return tokens.join("");
    };

    Basic.prototype.iolist = function(tokens, types, using) {
      var i, indent, item_tokens, item_types, list, nocr, token, _i, _len;
      list = [];
      item_tokens = [];
      item_types = [];
      indent = 0;
      nocr = false;
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        token = tokens[i];
        if (types[i] === STRING) {
          while (token.indexOf(" ") !== -1) {
            token = token.replace(" ", "&nbsp;");
          }
        }
        if (types[i] === DELIMITER && (token === "[" || token === "(")) {
          indent += 1;
        }
        if (indent === 0) {
          if (types[i] !== DELIMITER) {
            if (item_tokens.length > 0) {
              list.push(this.rvar(item_tokens, item_types));
              item_tokens = [];
              item_types = [];
              nocr = false;
            }
          }
          if (types[i] === DELIMITER && token === ",") {
            if (!using) {
              list.push("\t");
            }
            nocr = true;
          } else if (types[i] === DELIMITER && token === ";") {
            nocr = true;
          } else {
            item_tokens.push(token);
            item_types.push(types[i]);
          }
        } else {
          item_tokens.push(token);
          item_types.push(types[i]);
        }
        if (types[i] === DELIMITER && (token === "]" || token === ")")) {
          indent -= 1;
        }
      }
      if (item_tokens.length > 0) {
        list.push(this.rvar(item_tokens, item_types));
      }
      if (!(nocr || using)) {
        list.push("\"<br/>\"");
      }
      return list;
    };

    Basic.prototype.run = function() {
      var rte;
      rte = new Runtime(this.env, this.pcode, this.TRACE);
      return rte._run();
    };

    Basic.prototype.load = function(text) {
      var i, keyword, line, lineno, tokens, types, _i, _len, _ref, _results;
      if (text.indexOf('\r\n') >= 0) {
        this.eol = "\r";
        this.eol_len = 2;
      } else if (text.indexOf('\r') >= 0) {
        this.eol = "\r";
        this.eol_len = 1;
      } else if (text.indexOf('\n') >= 0) {
        this.eol = "\n";
        this.eol_len = 1;
      } else {
        throw Error("No EOL found");
      }
      this.pcode = [];
      this.prog = text.split("");
      this.prog.push(this.eot);
      this.pos = 0;
      keyword = "";
      while (keyword !== "END") {
        switch (this.get_token()) {
          case NUMBER:
            lineno = this.token;
            switch (this.get_token()) {
              case KEYWORD:
                keyword = this.token;
                break;
              case IDENTIFIER:
                keyword = "LET";
                this.put_back();
                break;
              default:
                throw "Expected KEYWORD or IDENTIFIER, found " + this.token;
            }
            break;
          case KEYWORD:
            lineno = "";
            keyword = this.token;
            break;
          case IDENTIFIER:
            lineno = "";
            keyword = "LET";
            this.put_back();
            break;
          case DELIMITER:
            switch (this.token) {
              case this.eol:
                lineno = "";
                keyword = "";
                break;
              case this.eot:
                return;
              default:
                throw "Expected EOL, found " + this.token;
            }
            break;
          default:
            throw "Expected KEYWORD or IDENTIFIER, found " + this.token;
        }
        tokens = [];
        types = [];
        while (this.token !== this.eol) {
          this.get_token();
          if (this.token !== this.eol) {
            types.push(this.token_type);
            tokens.push(this.token);
          }
        }
        if (keyword !== "") {
          this.labels[lineno] = this.pcode.length;
          this.pcode.push({
            lineno: lineno,
            keyword: keyword,
            src: tokens.join(" "),
            opcode: KEYWORDS[keyword],
            data: this[keyword](tokens, types)
          });
        }
      }
      _ref = this.pcode;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        switch (line.opcode) {
          case GOSUB:
            _results.push(line.data.pc = this.labels[line.data.lineno]);
            break;
          case GOTO:
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = line.data.lineno;
              _results1 = [];
              for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
                lineno = _ref1[i];
                _results1.push(line.data.pc[i] = this.labels[lineno]);
              }
              return _results1;
            }).call(this));
            break;
          case IF:
            _results.push(line.data.pc = this.labels[line.data.lineno]);
            break;
          case PRINT:
            if (line.data.lineno !== "") {
              _results.push(line.data.pc = this.labels[line.data.lineno]);
            } else {
              _results.push(void 0);
            }
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    Basic.prototype.put_back = function() {
      return this.pos = this.pos - this.token.length;
    };

    Basic.prototype.get_token = function() {
      var char, temp;
      this.token = "";
      this.token_type = 0;
      while (iswhite(this.prog[this.pos])) {
        this.pos += 1;
      }
      char = this.prog[this.pos];
      if (char === this.eol) {
        this.token = this.eol;
        this.pos += this.eol_len;
        return this.token_type = DELIMITER;
      }
      if (char === this.eot) {
        this.token = this.eot;
        return this.token_type = DELIMITER;
      }
      switch (char) {
        case "<":
          if (this.prog[this.pos + 1] === "=") {
            this.token = "<=";
            this.pos += 2;
            return this.token_type = DELIMITER;
          }
          if (this.prog[this.pos + 1] === ">") {
            this.token = "<>";
            this.pos += 2;
            return this.token_type = DELIMITER;
          }
          break;
        case ">":
          if (this.prog[this.pos + 1] === "=") {
            this.token = ">=";
            this.pos += 2;
            return this.token_type = DELIMITER;
          }
      }
      if (isdelim(char)) {
        this.token = char;
        this.pos += 1;
        return this.token_type = DELIMITER;
      }
      if (char === "\"") {
        this.pos += 1;
        temp = [];
        while (this.prog[this.pos] !== "\"") {
          temp.push(this.prog[this.pos]);
          this.pos += 1;
          if (this.prog[this.pos] === "\\") {
            temp.push(this.prog[this.pos]);
          }
        }
        this.pos += 1;
        this.token = temp.join("");
        return this.token_type = STRING;
      }
      if (isdigit(char)) {
        temp = [];
        while (isdigit(this.prog[this.pos])) {
          temp.push(this.prog[this.pos]);
          this.pos += 1;
        }
        this.token = temp.join("");
        return this.token_type = NUMBER;
      }
      if (isalpha(char)) {
        temp = [];
        while (!isdelim(this.prog[this.pos])) {
          temp.push(this.prog[this.pos]);
          this.pos += 1;
        }
        this.token = temp.join("");
        if (KEYWORDS[this.token] != null) {
          this.token_type = KEYWORD;
        } else {
          this.token_type = IDENTIFIER;
        }
      }
      return this.token_type;
    };

    Basic.prototype.BASE = function(tokens, types) {
      return {
        base: tokens[1]
      };
    };

    Basic.prototype.DATA = function(tokens, types) {
      var i, token, _i, _len;
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        token = tokens[i];
        if (types[i] === STRING) {
          tokens[i] = "\"" + token + "\"";
        }
      }
      return {
        items: tokens
      };
    };

    Basic.prototype.DEF = function(tokens, types) {
      return {
        name: tokens[0],
        param: tokens[2],
        body: "return " + (this.rvar(tokens.slice(5), types.slice(5))) + ";"
      };
    };

    Basic.prototype.DIM = function(tokens, types) {
      var data, i, isstring, name, v;
      data = [];
      i = 0;
      v = 0;
      while (i < tokens.length) {
        name = tokens[i];
        isstring = name.indexOf("$") !== -1;
        if (isstring) {
          v = " ";
        }
        this.sym.push(name);
        this.symtbl[name] = {
          name: name,
          string: isstring,
          array: true
        };
        if (tokens[i + 3] === ",") {
          data.push({
            name: name,
            string: isstring,
            init: v,
            dims: [parseInt(tokens[i + 2], 10) + 1, parseInt(tokens[i + 4], 10) + 1]
          });
          i += 7;
        } else {
          data.push({
            name: name,
            string: isstring,
            init: v,
            dims: [parseInt(tokens[i + 2], 10) + 1]
          });
          i += 5;
        }
      }
      return data;
    };

    Basic.prototype.END = function(tokens, types) {};

    Basic.prototype.FOR = function(tokens, types) {
      var i, _i, _ref;
      for (i = _i = 2, _ref = tokens.length - 1; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
        if (tokens[i] === "TO") {
          return {
            name: tokens[0],
            start: this.rvar(tokens.slice(2, i), types.slice(2, i)),
            end: this.rvar(tokens.slice(i + 1), types.slice(i + 1)),
            step: "1"
          };
        }
      }
    };

    Basic.prototype.GOSUB = function(tokens, types) {
      return {
        lineno: tokens[0],
        pc: tokens[0]
      };
    };

    Basic.prototype.GOTO = function(tokens, types) {
      var i, token, _i, _len;
      if (tokens.length === 1) {
        return {
          lineno: [tokens[0]],
          pc: [tokens[0]],
          x: 0
        };
      }
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        token = tokens[i];
        if (token === "OF") {
          return {
            lineno: tokens.slice(i + 1).join("").split(","),
            pc: tokens.slice(i + 1).join("").split(","),
            x: this.rvar(tokens.slice(0, i), types.slice(0, i))
          };
        }
      }
    };

    Basic.prototype.IF = function(tokens, types) {
      var i, token, _i, _len;
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        token = tokens[i];
        if (token === "THEN" || token === "GOTO") {
          return {
            lineno: tokens[i + 1],
            pc: tokens[i + 1],
            "if": this.rvar(tokens.slice(0, i), types.slice(0, i))
          };
        }
      }
    };

    Basic.prototype.IMAGE = function(tokens, types) {
      var c, count, group, i, index, j, k, list, mask, parens, _i, _j, _ref;
      mask = "<%= io[..] %>";
      index = 0;
      list = [];
      parens = false;
      i = 0;
      while (i < types.length) {
        switch (types[i]) {
          case STRING:
            list.push(tokens[i]);
            i += 1;
            break;
          case DELIMITER:
            if (tokens[i] === ")") {
              c = group.join("");
              for (k = _i = 1; 1 <= count ? _i <= count : _i >= count; k = 1 <= count ? ++_i : --_i) {
                list.push(c);
              }
              parens = false;
            }
            i += 1;
            break;
          case NUMBER:
            j = i + 1;
            if (types[j] === DELIMITER && tokens[j] === "(") {
              count = tokens[i];
              parens = true;
              group = [];
            } else {
              switch (tokens[j]) {
                case "A":
                  c = mask;
                  break;
                case "D":
                  c = mask;
                  break;
                case "X":
                  c = [];
                  for (k = _j = 1, _ref = tokens[i]; 1 <= _ref ? _j <= _ref : _j >= _ref; k = 1 <= _ref ? ++_j : --_j) {
                    c.push(" ");
                  }
                  c = c.join("");
              }
              if (parens) {
                group.push(c);
              } else {
                list.push(c);
              }
            }
            i += 2;
            break;
          default:
            switch (tokens[i]) {
              case "A":
                c = mask;
                break;
              case "D":
                c = mask;
                break;
              case "X":
                c = " ";
            }
            if (parens) {
              group.push(c);
            } else {
              list.push(c);
            }
            i += 1;
        }
      }
      index = 0;
      list = list.join("");
      while (list.indexOf(mask) !== -1) {
        list = list.replace(mask, "<%= io[" + index + "] %>");
        index += 1;
      }
      return {
        "template": _.template(list)
      };
    };

    Basic.prototype.INPUT = function(tokens, types) {
      var token, vars, _i, _len;
      vars = [];
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        token = tokens[_i];
        if (token !== ",") {
          vars.push(token);
        }
      }
      return {
        vars: vars
      };
    };

    Basic.prototype.LET = function(tokens, types) {
      var a, i, isstring, item, item_tokens, item_types, list, strs, sy, token, value, _i, _j, _len, _len1;
      list = [];
      item_tokens = [];
      item_types = [];
      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
        token = tokens[i];
        if (token === "=") {
          list.push(this.lvar(item_tokens, item_types));
          item_tokens = [];
          item_types = [];
        } else {
          item_tokens.push(token);
          item_types.push(types[i]);
        }
      }
      value = this.rvar(item_tokens, item_types);
      isstring = false;
      if (this.symtbl[tokens[0]] != null) {
        sy = this.symtbl[tokens[0]];
        isstring = sy.string && sy.array;
      }
      if (isstring) {
        strs = [];
        for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
          item = list[_j];
          if (item.indexOf("(") === -1) {
            strs.push("" + item + ".$(1," + value + ")");
          } else {
            a = item.split("(");
            strs.push("" + a[0] + ".$(" + a[1] + "," + value + ")");
          }
        }
        return {
          x: strs.join(";")
        };
      } else {
        list.push(value);
        return {
          x: list.join("=")
        };
      }
    };

    Basic.prototype.MAT = function(tokens, types) {
      return {
        name: tokens[0],
        value: tokens[2]
      };
    };

    Basic.prototype.NEXT = function(tokens, types) {
      return {
        name: tokens[0]
      };
    };

    Basic.prototype.PRINT = function(tokens, types) {
      if (tokens[0] === "USING") {
        return {
          lineno: tokens[1],
          iolist: this.iolist(tokens.slice(3), types.slice(3), true)
        };
      } else {
        return {
          lineno: "",
          iolist: this.iolist(tokens, types, false)
        };
      }
    };

    Basic.prototype.RANDOMIZE = function(tokens, types) {};

    Basic.prototype.READ = function(tokens, types) {};

    Basic.prototype.REM = function(tokens, types) {};

    Basic.prototype.RETURN = function(tokens, types) {};

    Basic.prototype.STOP = function(tokens, types) {};

    return Basic;

  })();

  Runtime = (function() {
    var FOR, GOSUB;

    GOSUB = 1;

    FOR = 2;

    Runtime.prototype._eop = false;

    Runtime.prototype._base = 0;

    Runtime.prototype._pc = 0;

    Runtime.prototype._stack = [];

    Runtime.prototype._pcode = [];

    Runtime.prototype._e = "";

    Runtime.prototype._limit = -1;

    Runtime.prototype._bench = null;

    Runtime.prototype._io = null;

    Runtime.prototype._env = null;

    Runtime.prototype._TRACE = false;

    Array.prototype.$ = function(start, end, value) {
      var char, _i, _j, _len, _len1, _ref;
      if (!(value != null)) {
        value = end;
        end = value.length - 1;
      }
      if (typeof value === "string") {
        _ref = value.split("");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          char = _ref[_i];
          if (start <= end) {
            this[start++] = char;
          }
        }
      } else {
        for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
          char = value[_j];
          if (start <= end) {
            this[start++] = char;
          }
        }
      }
      return this;
    };

    function Runtime(_env, _pcode, _TRACE) {
      this._env = _env;
      this._pcode = _pcode;
      this._TRACE = _TRACE;
      this._run = __bind(this._run, this);

    }

    Runtime.prototype._log = function(line) {
      return this._env.logger.println(line);
    };

    Runtime.prototype._print = function(value) {
      if (typeof value === "number") {
        return this._env.output.print(" " + value);
      } else {
        return this._env.output.print(value);
      }
    };

    Runtime.prototype._input = function(p, callback) {
      var io_buf;
      io_buf = [];
      if (this._io != null) {
        return this._io;
      }
      io = this._env.input.console({
        promptLabel: ">",
        continuedPromptLabel: ">>",
        promptHistory: true,
        autofocus: true,
        commandValidate: function(line) {
          if (line === "") {
            return false;
          } else {
            return true;
          }
        },
        commandHandle: function(line, report) {
          var item, _i, _len, _ref;
          _ref = line.split(",");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            io_buf.push(item);
          }
          if (io_buf.length < p.vars.length) {
            io.continuedPrompt = true;
          } else {
            io.continuedPrompt = false;
            callback(line.split(","));
            return true;
          }
        }
      });
      return io;
    };

    Runtime.prototype._run = function(wait) {
      var code, e, x, _i, _len, _ref, _results;
      if (!(wait != null)) {
        this._bench = new Benchmark();
        this._bench.mark('start');
      }
      wait = false;
      try {
        while (!(this._eop || wait)) {
          code = this._pcode[this._pc];
          this._pc = this._pc + 1;
          if (this._TRACE) {
            this._log("" + code.lineno + " " + code.keyword + " " + code.src);
          }
          wait = this[code.keyword](code.data);
          if (this._pc >= this._pcode.length) {
            this._eop = true;
          }
          if (this._limit >= 0) {
            this._limit -= 1;
            if (this._limit < 0) {
              this._eop = true;
            }
          }
        }
      } catch (ex) {
        this._e = "" + ex.message + " at line " + code.lineno + "\n" + code.lineno + " " + code.keyword + " " + code.src;
        wait = false;
      }
      this._env.output.scroll();
      this._env.logger.scroll();
      if (!wait) {
        this._bench.mark('end');
        x = this._bench.elapsed_time('start', 'end');
        if (this._TRACE) {
          this._log(this._bench.marker['start']);
          this._log(this._bench.marker['end']);
          this._log("Elapsed: " + x + " ms");
        }
        if (this._e !== "") {
          if (this._TRACE) {
            this._log("Exception : " + this._e);
          }
          _ref = this._e.split("\n");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            if (e != null) {
              _results.push(this._io.notice(e));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }
    };

    Runtime.prototype.ABS = function(n) {
      return Math.abs(n);
    };

    Runtime.prototype.ATN = function(n) {
      return Math.atan(n);
    };

    Runtime.prototype.COS = function(n) {
      return Math.cos(n);
    };

    Runtime.prototype.EXP = function(n) {
      return Math.exp(n);
    };

    Runtime.prototype.INT = function(n) {
      return Math.floor(n);
    };

    Runtime.prototype.LOG = function(n) {
      return Math.log(n);
    };

    Runtime.prototype.RND = function(n) {
      return Math.random();
    };

    Runtime.prototype.SGN = function(n) {
      if (n < 0) {
        return -1;
      } else if (n > 0) {
        return 1;
      } else {
        return 0;
      }
    };

    Runtime.prototype.SIN = function(n) {
      return Math.sin(n);
    };

    Runtime.prototype.SQR = function(n) {
      return Math.sqrt(n);
    };

    Runtime.prototype.SUBSTR = function(str, start, end) {
      return str.slice(start, end);
    };

    Runtime.prototype.TAB = function(n) {
      var i, t, _i, _ref;
      t = [];
      for (i = _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        t[i] = " ";
      }
      return t.join('');
    };

    Runtime.prototype.TAN = function(n) {
      return Math.tan(n);
    };

    Runtime.prototype.TIM = function(n) {
      var d;
      d = new Date();
      if (n === 0) {
        return d.getMinutes();
      } else {
        return d.getSeconds();
      }
    };

    Runtime.prototype.BASE = function(p) {
      this._base = p.base;
      return false;
    };

    Runtime.prototype.DATA = function(p) {
      return false;
    };

    Runtime.prototype.DEF = function(p) {
      this[p.name] = new Function(p.param, p.body);
      return false;
    };

    Runtime.prototype.DIM = function(p) {
      var array, dim1, dim2, dims, init, name, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      for (_i = 0, _len = p.length; _i < _len; _i++) {
        array = p[_i];
        name = array.name;
        dims = array.dims;
        init = array.init;
        this[name] = [];
        switch (dims.length) {
          case 1:
            for (dim1 = _j = _ref = this._base, _ref1 = dims[0]; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; dim1 = _ref <= _ref1 ? ++_j : --_j) {
              this[name][dim1] = init;
            }
            break;
          case 2:
            for (dim1 = _k = _ref2 = this._base, _ref3 = dims[0]; _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; dim1 = _ref2 <= _ref3 ? ++_k : --_k) {
              this[name][dim1] = [];
              for (dim2 = _l = _ref4 = this._base, _ref5 = dims[1]; _ref4 <= _ref5 ? _l <= _ref5 : _l >= _ref5; dim2 = _ref4 <= _ref5 ? ++_l : --_l) {
                this[name][dim1][dim2] = init;
              }
            }
        }
      }
      return false;
    };

    Runtime.prototype.END = function(p) {
      this._eop = true;
      return false;
    };

    Runtime.prototype.FOR = function(p) {
      this[p.name] = eval(p.start);
      this._stack.push({
        id: FOR,
        pc: this._pc,
        name: p.name,
        end: eval(p.end),
        step: eval(p.step)
      });
      return false;
    };

    Runtime.prototype.GOSUB = function(p) {
      this._stack.push({
        id: GOSUB,
        pc: this._pc
      });
      this._pc = p.pc;
      return false;
    };

    Runtime.prototype.GOTO = function(p) {
      this._pc = p.pc[eval(p.x)];
      return false;
    };

    Runtime.prototype.IF = function(p) {
      if (eval(p["if"])) {
        this._pc = p.pc;
      }
      return false;
    };

    Runtime.prototype.IMAGE = function(p) {
      return false;
    };

    Runtime.prototype.INPUT = function(p) {
      var _this = this;
      this._io = this._input(p, function(iobuf) {
        var i, name, _i, _len, _ref;
        if (iobuf != null) {
          _ref = p.vars;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            name = _ref[i];
            _this[name] = iobuf[i];
          }
          _this._print("\n");
        }
        _this._eop = false;
        _this._run(true);
        return false;
      });
      return true;
    };

    Runtime.prototype.LET = function(p) {
      eval(p.x);
      return false;
    };

    Runtime.prototype.MAT = function(p) {
      var i, j, name, v, _i, _j, _ref, _ref1;
      switch (p.value) {
        case "ZER":
          v = 0;
          break;
        default:
          return false;
      }
      name = p.name;
      if (this[name] != null) {
        for (i = _i = 0, _ref = this[name].length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (Array.isArray(this[name][i])) {
            for (j = _j = 0, _ref1 = this[name][i].length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              this[name][i][j] = v;
            }
          } else {
            this[name][i] = v;
          }
        }
      } else {
        this[name] = [v, v, v, v, v, v, v, v, v, v, v];
      }
      return false;
    };

    Runtime.prototype.NEXT = function(p) {
      var counter, frame, name;
      frame = this._stack[this._stack.length - 1];
      if (frame.id !== FOR) {
        throw "Next without for";
      }
      name = p.name;
      if (frame.name !== name) {
        throw "Mismatched For/Next " + name;
      }
      counter = this[name] + frame.step;
      this[name] = counter;
      if (counter > eval(frame.end)) {
        this._stack.pop();
      } else {
        this._pc = frame.pc;
      }
      return false;
    };

    Runtime.prototype.PRINT = function(p) {
      var item, template, _i, _j, _len, _len1, _ref, _ref1;
      if (p.lineno === "") {
        _ref = p.iolist;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.length === 1) {
            this._print(item);
          } else {
            this._print(eval(item));
          }
        }
      } else {
        template = this._pcode[p.pc].p.template;
        io = [];
        _ref1 = p.iolist;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          item = _ref1[_j];
          io.push(eval(item));
        }
        this._print(template({
          io: io
        }));
      }
      return false;
    };

    Runtime.prototype.RANDOMIZE = function(p) {
      return false;
    };

    Runtime.prototype.REM = function(p) {
      return false;
    };

    Runtime.prototype.READ = function(p) {
      return false;
    };

    Runtime.prototype.RETURN = function(p) {
      var frame;
      frame = this._stack.pop();
      while (frame.id !== GOSUB) {
        frame = this._stack.pop();
      }
      this._pc = frame.pc;
      return false;
    };

    Runtime.prototype.STOP = function(p) {
      this._eop = true;
      throw Error("STOP");
      return false;
    };

    return Runtime;

  })();

  CodeModel = (function(_super) {

    __extends(CodeModel, _super);

    function CodeModel() {
      return CodeModel.__super__.constructor.apply(this, arguments);
    }

    CodeModel.prototype.defaults = {
      source: ''
    };

    CodeModel.prototype.prog = null;

    CodeModel.prototype.run = function() {
      return window.setTimeout(this.get('prog').run, 10);
    };

    CodeModel.prototype.load = function(env, source) {
      this.set({
        'source': source
      });
      this.set({
        'prog': new Basic(env, source, true)
      });
      return this.get('prog');
    };

    return CodeModel;

  })(Backbone.Model);

  MainView = (function(_super) {

    __extends(MainView, _super);

    function MainView() {
      this.run = __bind(this.run, this);

      this.repl = __bind(this.repl, this);
      return MainView.__super__.constructor.apply(this, arguments);
    }

    MainView.prototype.input = null;

    MainView.prototype.output = null;

    MainView.prototype.logger = null;

    MainView.prototype.enabled = true;

    MainView.prototype.el = $('#katra-menu');

    MainView.prototype.events = {
      'click .katra-run': 'run'
    };

    MainView.prototype.initialize = function(model) {
      this.model = model;
      this.logger = new io.Output('.katra-logger-panel');
      this.read = new io.Input('.katra-read-panel');
      this.print = new io.Output('.katra-print-panel');
      this.input = $('<div class="runtime">');
      $('.katra-input-panel').append(this.input);
      this.output = new io.Output('.katra-output-panel');
      this.prog = this.model.load(this, $('#katra-source').text());
      return this.repl();
    };

    MainView.prototype.render = function() {};

    MainView.prototype.repl = function() {
      var dom;
      dom = $('<div class="runtime">');
      $('.katra-repl-panel').append(dom);
      return this.console = dom.console({
        promptLabel: "repl>",
        continuedPromptLabel: "repl>>",
        welcomeMessage: "*** Katra Basic REPL ***",
        promptHistory: true,
        autofocus: true,
        commandValidate: this.commandValidate,
        commandHandle: this.commandHandle
      });
    };

    MainView.prototype.commandHandle = function(line, report) {
      var inner, mesg, ret;
      inner = $('div .jquery-console-inner');
      alert(inner);
      mesg = $('<div class="jquery-console-message"></div>');
      mesg.filledText("some more data\n\n").hide();
      inner.append(mesg);
      mesg.show();
      inner.append;
      try {
        ret = eval(line);
        if (ret != null) {
          return "\nand the answer is " + (ret.toString()) + " ...";
        } else {
          return true;
        }
      } catch (e) {
        return e.toString();
      }
    };

    MainView.prototype.commandValidate = function(line) {
      if (line === "") {
        return false;
      } else {
        return true;
      }
    };

    MainView.prototype.run = function(event) {
      if (this.enabled === true) {
        this.enabled = false;
        return window.setTimeout(this.prog.run, 10);
      }
    };

    MainView.prototype.disable = function() {
      return this.enabled = false;
    };

    return MainView;

  })(Backbone.View);

  Main = (function(_super) {

    __extends(Main, _super);

    function Main() {
      return Main.__super__.constructor.apply(this, arguments);
    }

    Main.prototype.routes = {
      '': 'index'
    };

    Main.prototype.index = function() {
      return this.mainView.render();
    };

    Main.prototype.initialize = function() {
      this.code = new CodeModel;
      return this.mainView = new MainView(this.code);
    };

    return Main;

  })(Backbone.Router);

  $(function() {
    var main;
    main = new Main;
    Backbone.history.start();
    return prettyPrint();
  });

}).call(this);
